# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule BungieNetAPI.Connection do
  @moduledoc """
  Handle Tesla connections for BungieNetAPI.
  """

  use Tesla

  # Add any middleware here (authentication)
  plug Tesla.Middleware.BaseUrl, "https://www.bungie.net/Platform"
  plug Tesla.Middleware.Headers, %{"User-Agent" => "Elixir"}
  plug Tesla.Middleware.FollowRedirects
  plug Tesla.Middleware.EncodeJson

  @scopes [
    "ReadBasicUserProfile", # Read basic user profile information such as the user&#39;s handle, avatar icon, etc.
    "ReadGroups", # Read Group/Clan Forums, Wall, and Members for groups and clans that the   user has joined.
    "WriteGroups", # Write Group/Clan Forums, Wall, and Members for groups and clans that the   user has joined.
    "AdminGroups", # Administer Group/Clan Forums, Wall, and Members for groups and clans that the   user is a founder or an administrator.
    "BnetWrite", # Create new groups, clans, and forum posts.
    "MoveEquipDestinyItems", # Move or equip Destiny items
    "ReadDestinyInventoryAndVault", # Read Destiny 1 Inventory and Vault contents.  For Destiny 2, this scope is needed to read anything regarded as private. This is the only scope a  Destiny 2 app needs for read operations against Destiny 2 data such as inventory, vault, currency,  vendors, milestones, progression, etc.
    "ReadUserData", # Read user data such as who they are web notifications,   clan/group memberships, recent activity, muted users.
    "EditUserData", # Edit user data such as preferred language, status, motto, avatar selection and theme.
    "ReadDestinyVendorsAndAdvisors", # Access vendor and advisor data specific to a user. OBSOLETE. This scope is only used on the Destiny 1 API.
    "ReadAndApplyTokens" # Read offer history and claim and apply tokens for the user.
  ]

  @doc """
  Configure a client connection using a provided OAuth2 token as a Bearer token

  ## Parameters

  - token (String): Bearer token

  ## Returns

  Tesla.Env.client
  """
  @spec new(String.t, String.t) :: Tesla.Env.client
  def new(token, api_key) when is_binary(token) and is_binary(api_key) do
    Tesla.build_client([
      {
        Tesla.Middleware.Headers,  %{
          "Authorization" => "Bearer #{token}",
          "X-API-Key" => api_key
        }
      }
    ])
  end

  @doc """
  Configure a client connection using a function which yields a Bearer token.

  ## Parameters

  - token_fetcher (function arity of 1): Callback which provides an OAuth2 token
    given a list of scopes

  ## Returns

  Tesla.Env.client
  """
  @spec new(((list(String.t)) -> String.t)) :: Tesla.Env.client
  def new(token_fetcher) when is_function(token_fetcher) do
    token_fetcher.(@scopes)
    |> new
  end
  @doc """
  Configure an authless client connection

  # Returns

  Tesla.Env.client
  """
  @spec new() :: Tesla.Env.client
  def new do
    Tesla.build_client([])
  end
end
