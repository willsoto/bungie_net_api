# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule BungieNetAPI.Model.DestinyDefinitionsDestinyTalentGridDefinition do
  @moduledoc """
  The time has unfortunately come to talk about Talent Grids.  Talent Grids are the most complex and unintuitive part of the Destiny Definition data. Grab a cup of coffee before we begin, I can wait.  Talent Grids were the primary way that items could be customized in Destiny 1. In Destiny 2, for now, talent grids have become exclusively used by Subclass/Build items: but the system is still in place for it to be used by items should the direction change back toward talent grids.  Talent Grids have Nodes: the visual circles on the talent grid detail screen that have icons and can be activated if you meet certain requirements and pay costs. The actual visual data and effects, however, are driven by the \&quot;Steps\&quot; on Talent Nodes. Any given node will have 1:M of these steps, and the specific step that will be considered the \&quot;current\&quot; step (and thus the dictator of all benefits, visual state, and activation requirements on the Node) will almost always not be determined until an instance of the item is created. This is how, in Destiny 1, items were able to have such a wide variety of what users saw as \&quot;Perks\&quot;: they were actually Talent Grids with nodes that had a wide variety of Steps, randomly chosen at the time of item creation.  Now that Talent Grids are used exclusively by subclasses and builds, all of the properties within still apply: but there are additional visual elements on the Subclass/Build screens that are superimposed on top of the talent nodes. Unfortunately, BNet doesn&#39;t have this data: if you want to build a subclass screen, you will have to provide your own \&quot;decorative\&quot; assets, such as the visual connectors between nodes and the fancy colored-fire-bathed character standing behind the nodes.  DestinyInventoryItem.talentGrid.talentGridHash defines an item&#39;s linked Talent Grid, which brings you to this definition that contains enough satic data about talent grids to make your head spin. These *must* be combined with instanced data - found when live data returns DestinyItemTalentGridComponent - in order to derive meaning. The instanced data will reference nodes and steps within these definitions, which you will then have to look up in the definition and combine with the instanced data to give the user the visual representation of their item&#39;s talent grid.
  """

  @derive [Poison.Encoder]
  defstruct [
    :"maxGridLevel",
    :"gridLevelPerColumn",
    :"progressionHash",
    :"nodes",
    :"exclusiveSets",
    :"independentNodeIndexes",
    :"groups",
    :"nodeCategories",
    :"hash",
    :"index",
    :"redacted"
  ]

  @type t :: %__MODULE__{
    :"maxGridLevel" => integer(),
    :"gridLevelPerColumn" => integer(),
    :"progressionHash" => integer(),
    :"nodes" => [DestinyDefinitionsDestinyTalentNodeDefinition],
    :"exclusiveSets" => [DestinyDefinitionsDestinyTalentNodeExclusiveSetDefinition],
    :"independentNodeIndexes" => [integer()],
    :"groups" => %{optional(String.t) => DestinyDefinitionsDestinyTalentExclusiveGroup},
    :"nodeCategories" => [DestinyDefinitionsDestinyTalentNodeCategory],
    :"hash" => integer(),
    :"index" => integer(),
    :"redacted" => boolean()
  }
end

defimpl Poison.Decoder, for: BungieNetAPI.Model.DestinyDefinitionsDestinyTalentGridDefinition do
  import BungieNetAPI.Deserializer
  def decode(value, options) do
    value
    |> deserialize(:"nodes", :list, BungieNetAPI.Model.DestinyDefinitionsDestinyTalentNodeDefinition, options)
    |> deserialize(:"exclusiveSets", :list, BungieNetAPI.Model.DestinyDefinitionsDestinyTalentNodeExclusiveSetDefinition, options)
    |> deserialize(:"groups", :map, BungieNetAPI.Model.DestinyDefinitionsDestinyTalentExclusiveGroup, options)
    |> deserialize(:"nodeCategories", :list, BungieNetAPI.Model.DestinyDefinitionsDestinyTalentNodeCategory, options)
  end
end

