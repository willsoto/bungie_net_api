# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule BungieNetAPI.Model.DestinyDefinitionsDestinyInventoryBucketDefinition do
  @moduledoc """
  An Inventory (be it Character or Profile level) is comprised of many Buckets. An example of a bucket is \&quot;Primary Weapons\&quot;, where all of the primary weapons on a character are gathered together into a single visual element in the UI: a subset of the inventory that has a limited number of slots, and in this case also has an associated Equipment Slot for equipping an item in the bucket.  Item definitions declare what their \&quot;default\&quot; bucket is (DestinyInventoryItemDefinition.inventory.bucketTypeHash), and Item instances will tell you which bucket they are currently residing in (DestinyItemComponent.bucketHash). You can use this information along with the DestinyInventoryBucketDefinition to show these items grouped by bucket.  You cannot transfer an item to a bucket that is not its Default without going through a Vendor&#39;s \&quot;accepted items\&quot; (DestinyVendorDefinition.acceptedItems). This is how transfer functionality like the Vault is implemented, as a feature of a Vendor. See the vendor&#39;s acceptedItems property for more details.
  """

  @derive [Poison.Encoder]
  defstruct [
    :"displayProperties",
    :"scope",
    :"category",
    :"bucketOrder",
    :"itemCount",
    :"location",
    :"hasTransferDestination",
    :"enabled",
    :"fifo",
    :"hash",
    :"index",
    :"redacted"
  ]

  @type t :: %__MODULE__{
    :"displayProperties" => DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition,
    :"scope" => Object,
    :"category" => Object,
    :"bucketOrder" => integer(),
    :"itemCount" => integer(),
    :"location" => Object,
    :"hasTransferDestination" => boolean(),
    :"enabled" => boolean(),
    :"fifo" => boolean(),
    :"hash" => integer(),
    :"index" => integer(),
    :"redacted" => boolean()
  }
end

defimpl Poison.Decoder, for: BungieNetAPI.Model.DestinyDefinitionsDestinyInventoryBucketDefinition do
  import BungieNetAPI.Deserializer
  def decode(value, options) do
    value
    |> deserialize(:"displayProperties", :struct, BungieNetAPI.Model.DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition, options)
    |> deserialize(:"scope", :struct, BungieNetAPI.Model.Object, options)
    |> deserialize(:"category", :struct, BungieNetAPI.Model.Object, options)
    |> deserialize(:"location", :struct, BungieNetAPI.Model.Object, options)
  end
end

