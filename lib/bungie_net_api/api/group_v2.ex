# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule BungieNetAPI.Api.GroupV2 do
  @moduledoc """
  API calls for all endpoints tagged `GroupV2`.
  """

  alias BungieNetAPI.Connection
  import BungieNetAPI.RequestBuilder


  @doc """
  An administrative method to allow the founder of a group or clan to give up their position to another admin permanently.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - founder_id_new (integer()): The new founder for this group. Must already be a group admin.
  - group_id (integer()): The target group id.
  - membership_type (integer()): Membership type of the provided founderIdNew.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20014{}} on success
  {:error, info} on failure
  """
  @spec group_v2_abdicate_foundership(Tesla.Env.client, integer(), integer(), integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20014.t} | {:error, Tesla.Env.t}
  def group_v2_abdicate_foundership(connection, founder_id_new, group_id, membership_type, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/GroupV2/#{group_id}/Admin/AbdicateFoundership/#{membership_type}/#{founder_id_new}/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20014{})
  end

  @doc """
  Add a new optional conversation/chat channel. Requires admin permissions to the group.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - group_id (integer()): Group ID of the group to edit.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse2007{}} on success
  {:error, info} on failure
  """
  @spec group_v2_add_optional_conversation(Tesla.Env.client, integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse2007.t} | {:error, Tesla.Env.t}
  def group_v2_add_optional_conversation(connection, group_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/GroupV2/#{group_id}/OptionalConversations/Add/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse2007{})
  end

  @doc """
  Approve all of the pending users for the given group.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - group_id (integer()): ID of the group.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20026{}} on success
  {:error, info} on failure
  """
  @spec group_v2_approve_all_pending(Tesla.Env.client, integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20026.t} | {:error, Tesla.Env.t}
  def group_v2_approve_all_pending(connection, group_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/GroupV2/#{group_id}/Members/ApproveAll/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20026{})
  end

  @doc """
  Approve the given membershipId to join the group/clan as long as they have applied.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - group_id (integer()): ID of the group.
  - membership_id (integer()): The membership id being approved.
  - membership_type (integer()): Membership type of the supplied membership ID.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20014{}} on success
  {:error, info} on failure
  """
  @spec group_v2_approve_pending(Tesla.Env.client, integer(), integer(), integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20014.t} | {:error, Tesla.Env.t}
  def group_v2_approve_pending(connection, group_id, membership_id, membership_type, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/GroupV2/#{group_id}/Members/Approve/#{membership_type}/#{membership_id}/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20014{})
  end

  @doc """
  Approve all of the pending users for the given group.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - group_id (integer()): ID of the group.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20026{}} on success
  {:error, info} on failure
  """
  @spec group_v2_approve_pending_for_list(Tesla.Env.client, integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20026.t} | {:error, Tesla.Env.t}
  def group_v2_approve_pending_for_list(connection, group_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/GroupV2/#{group_id}/Members/ApproveList/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20026{})
  end

  @doc """
  Bans the requested member from the requested group for the specified period of time.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - group_id (integer()): Group ID that has the member to ban.
  - membership_id (integer()): Membership ID of the member to ban from the group.
  - membership_type (integer()): Membership type of the provided membership ID.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20015{}} on success
  {:error, info} on failure
  """
  @spec group_v2_ban_member(Tesla.Env.client, integer(), integer(), integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20015.t} | {:error, Tesla.Env.t}
  def group_v2_ban_member(connection, group_id, membership_id, membership_type, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/GroupV2/#{group_id}/Members/#{membership_type}/#{membership_id}/Ban/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20015{})
  end

  @doc """
  Create a new group.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20020{}} on success
  {:error, info} on failure
  """
  @spec group_v2_create_group(Tesla.Env.client, keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20020.t} | {:error, Tesla.Env.t}
  def group_v2_create_group(connection, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/GroupV2/Create/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20020{})
  end

  @doc """
  Deny all of the pending users for the given group.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - group_id (integer()): ID of the group.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20026{}} on success
  {:error, info} on failure
  """
  @spec group_v2_deny_all_pending(Tesla.Env.client, integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20026.t} | {:error, Tesla.Env.t}
  def group_v2_deny_all_pending(connection, group_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/GroupV2/#{group_id}/Members/DenyAll/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20026{})
  end

  @doc """
  Deny all of the pending users for the given group that match the passed-in .

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - group_id (integer()): ID of the group.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20026{}} on success
  {:error, info} on failure
  """
  @spec group_v2_deny_pending_for_list(Tesla.Env.client, integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20026.t} | {:error, Tesla.Env.t}
  def group_v2_deny_pending_for_list(connection, group_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/GroupV2/#{group_id}/Members/DenyList/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20026{})
  end

  @doc """
  Edit an existing group&#39;s clan banner. You must have suitable permissions in the group to perform this operation. All fields are required.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - group_id (integer()): Group ID of the group to edit.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20015{}} on success
  {:error, info} on failure
  """
  @spec group_v2_edit_clan_banner(Tesla.Env.client, integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20015.t} | {:error, Tesla.Env.t}
  def group_v2_edit_clan_banner(connection, group_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/GroupV2/#{group_id}/EditClanBanner/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20015{})
  end

  @doc """
  Edit group options only available to a founder. You must have suitable permissions in the group to perform this operation.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - group_id (integer()): Group ID of the group to edit.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20015{}} on success
  {:error, info} on failure
  """
  @spec group_v2_edit_founder_options(Tesla.Env.client, integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20015.t} | {:error, Tesla.Env.t}
  def group_v2_edit_founder_options(connection, group_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/GroupV2/#{group_id}/EditFounderOptions/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20015{})
  end

  @doc """
  Edit an existing group. You must have suitable permissions in the group to perform this operation. This latest revision will only edit the fields you pass in - pass null for properties you want to leave unaltered.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - group_id (integer()): Group ID of the group to edit.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20015{}} on success
  {:error, info} on failure
  """
  @spec group_v2_edit_group(Tesla.Env.client, integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20015.t} | {:error, Tesla.Env.t}
  def group_v2_edit_group(connection, group_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/GroupV2/#{group_id}/Edit/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20015{})
  end

  @doc """
  Edit the membership type of a given member. You must have suitable permissions in the group to perform this operation.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - group_id (integer()): ID of the group to which the member belongs.
  - membership_id (integer()): Membership ID to modify.
  - membership_type (integer()): Membership type of the provide membership ID.
  - member_type (integer()): New membertype for the specified member.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20015{}} on success
  {:error, info} on failure
  """
  @spec group_v2_edit_group_membership(Tesla.Env.client, integer(), integer(), integer(), integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20015.t} | {:error, Tesla.Env.t}
  def group_v2_edit_group_membership(connection, group_id, membership_id, membership_type, member_type, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/GroupV2/#{group_id}/Members/#{membership_type}/#{membership_id}/SetMembershipType/#{member_type}/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20015{})
  end

  @doc """
  Edit the settings of an optional conversation/chat channel. Requires admin permissions to the group.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - conversation_id (integer()): Conversation Id of the channel being edited.
  - group_id (integer()): Group ID of the group to edit.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse2007{}} on success
  {:error, info} on failure
  """
  @spec group_v2_edit_optional_conversation(Tesla.Env.client, integer(), integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse2007.t} | {:error, Tesla.Env.t}
  def group_v2_edit_optional_conversation(connection, conversation_id, group_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/GroupV2/#{group_id}/OptionalConversations/Edit/#{conversation_id}/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse2007{})
  end

  @doc """
  Get the list of members in a given group who are of admin level or higher.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - currentpage (integer()): Page number (starting with 1). Each page has a fixed size of 50 items per page.
  - group_id (integer()): The ID of the group.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20021{}} on success
  {:error, info} on failure
  """
  @spec group_v2_get_admins_and_founder_of_group(Tesla.Env.client, integer(), integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20021.t} | {:error, Tesla.Env.t}
  def group_v2_get_admins_and_founder_of_group(connection, currentpage, group_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/GroupV2/#{group_id}/AdminsAndFounder/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20021{})
  end

  @doc """
  Returns a list of all available group avatars for the signed-in user.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20012{}} on success
  {:error, info} on failure
  """
  @spec group_v2_get_available_avatars(Tesla.Env.client, keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20012.t} | {:error, Tesla.Env.t}
  def group_v2_get_available_avatars(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/GroupV2/GetAvailableAvatars/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20012{})
  end

  @doc """
  Returns a list of all available group themes.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20013{}} on success
  {:error, info} on failure
  """
  @spec group_v2_get_available_themes(Tesla.Env.client, keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20013.t} | {:error, Tesla.Env.t}
  def group_v2_get_available_themes(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/GroupV2/GetAvailableThemes/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20013{})
  end

  @doc """
  Get the list of banned members in a given group. Only accessible to group Admins and above. Not applicable to all groups. Check group features.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - currentpage (integer()): Page number (starting with 1). Each page has a fixed size of 50 entries.
  - group_id (integer()): Group ID whose banned members you are fetching
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20023{}} on success
  {:error, info} on failure
  """
  @spec group_v2_get_banned_members_of_group(Tesla.Env.client, integer(), integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20023.t} | {:error, Tesla.Env.t}
  def group_v2_get_banned_members_of_group(connection, currentpage, group_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/GroupV2/#{group_id}/Banned/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20023{})
  end

  @doc """
  Get information about a specific group of the given ID.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - group_id (integer()): Requested group&#39;s id.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20018{}} on success
  {:error, info} on failure
  """
  @spec group_v2_get_group(Tesla.Env.client, integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20018.t} | {:error, Tesla.Env.t}
  def group_v2_get_group(connection, group_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/GroupV2/#{group_id}/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20018{})
  end

  @doc """
  Get information about a specific group with the given name and type.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - group_name (String.t): Exact name of the group to find.
  - group_type (integer()): Type of group to find.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20018{}} on success
  {:error, info} on failure
  """
  @spec group_v2_get_group_by_name(Tesla.Env.client, String.t, integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20018.t} | {:error, Tesla.Env.t}
  def group_v2_get_group_by_name(connection, group_name, group_type, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/GroupV2/Name/#{group_name}/#{group_type}/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20018{})
  end

  @doc """
  Gets a list of available optional conversation channels and their settings.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - group_id (integer()): Requested group&#39;s id.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20019{}} on success
  {:error, info} on failure
  """
  @spec group_v2_get_group_optional_conversations(Tesla.Env.client, integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20019.t} | {:error, Tesla.Env.t}
  def group_v2_get_group_optional_conversations(connection, group_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/GroupV2/#{group_id}/OptionalConversations/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20019{})
  end

  @doc """
  Get information about the groups that a given member has joined.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - filter (integer()): Filter apply to list of joined groups.
  - group_type (integer()): Type of group the supplied member founded.
  - membership_id (integer()): Membership ID to for which to find founded groups.
  - membership_type (integer()): Membership type of the supplied membership ID.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20027{}} on success
  {:error, info} on failure
  """
  @spec group_v2_get_groups_for_member(Tesla.Env.client, integer(), integer(), integer(), integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20027.t} | {:error, Tesla.Env.t}
  def group_v2_get_groups_for_member(connection, filter, group_type, membership_id, membership_type, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/GroupV2/User/#{membership_type}/#{membership_id}/#{filter}/#{group_type}/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20027{})
  end

  @doc """
  Get the list of users who have been invited into the group.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - currentpage (integer()): Page number (starting with 1). Each page has a fixed size of 50 items per page.
  - group_id (integer()): ID of the group.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20025{}} on success
  {:error, info} on failure
  """
  @spec group_v2_get_invited_individuals(Tesla.Env.client, integer(), integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20025.t} | {:error, Tesla.Env.t}
  def group_v2_get_invited_individuals(connection, currentpage, group_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/GroupV2/#{group_id}/Members/InvitedIndividuals/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20025{})
  end

  @doc """
  Get the list of members in a given group.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - currentpage (integer()): Page number (starting with 1). Each page has a fixed size of 50 items per page.
  - group_id (integer()): The ID of the group.
  - opts (KeywordList): [optional] Optional parameters
    - :member_type (integer()): Filter out other member types. Use None for all members.
    - :name_search (String.t): The name fragment upon which a search should be executed for members with matching display or unique names.

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20021{}} on success
  {:error, info} on failure
  """
  @spec group_v2_get_members_of_group(Tesla.Env.client, integer(), integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20021.t} | {:error, Tesla.Env.t}
  def group_v2_get_members_of_group(connection, currentpage, group_id, opts \\ []) do
    optional_params = %{
      :"memberType" => :query,
      :"nameSearch" => :query
    }
    %{}
    |> method(:get)
    |> url("/GroupV2/#{group_id}/Members/")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20021{})
  end

  @doc """
  Get the list of users who are awaiting a decision on their application to join a given group. Modified to include application info.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - currentpage (integer()): Page number (starting with 1). Each page has a fixed size of 50 items per page.
  - group_id (integer()): ID of the group.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20025{}} on success
  {:error, info} on failure
  """
  @spec group_v2_get_pending_memberships(Tesla.Env.client, integer(), integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20025.t} | {:error, Tesla.Env.t}
  def group_v2_get_pending_memberships(connection, currentpage, group_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/GroupV2/#{group_id}/Members/Pending/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20025{})
  end

  @doc """
  Get information about the groups that a given member has applied to or been invited to.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - filter (integer()): Filter apply to list of potential joined groups.
  - group_type (integer()): Type of group the supplied member applied.
  - membership_id (integer()): Membership ID to for which to find applied groups.
  - membership_type (integer()): Membership type of the supplied membership ID.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20028{}} on success
  {:error, info} on failure
  """
  @spec group_v2_get_potential_groups_for_member(Tesla.Env.client, integer(), integer(), integer(), integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20028.t} | {:error, Tesla.Env.t}
  def group_v2_get_potential_groups_for_member(connection, filter, group_type, membership_id, membership_type, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/GroupV2/User/Potential/#{membership_type}/#{membership_id}/#{filter}/#{group_type}/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20028{})
  end

  @doc """
  Gets groups recommended for you based on the groups to whom those you follow belong.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - create_date_range (integer()): Requested range in which to pull recommended groups
  - group_type (integer()): Type of groups requested
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20016{}} on success
  {:error, info} on failure
  """
  @spec group_v2_get_recommended_groups(Tesla.Env.client, integer(), integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20016.t} | {:error, Tesla.Env.t}
  def group_v2_get_recommended_groups(connection, create_date_range, group_type, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/GroupV2/Recommended/#{group_type}/#{create_date_range}/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20016{})
  end

  @doc """
  Gets the state of the user&#39;s clan invite preferences for a particular membership type - true if they wish to be invited to clans, false otherwise.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - m_type (integer()): The Destiny membership type of the account we wish to access settings.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20014{}} on success
  {:error, info} on failure
  """
  @spec group_v2_get_user_clan_invite_setting(Tesla.Env.client, integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20014.t} | {:error, Tesla.Env.t}
  def group_v2_get_user_clan_invite_setting(connection, m_type, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/GroupV2/GetUserClanInviteSetting/#{m_type}/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20014{})
  end

  @doc """
  Search for Groups.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20017{}} on success
  {:error, info} on failure
  """
  @spec group_v2_group_search(Tesla.Env.client, keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20017.t} | {:error, Tesla.Env.t}
  def group_v2_group_search(connection, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/GroupV2/Search/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20017{})
  end

  @doc """
  Invite a user to join this group.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - group_id (integer()): ID of the group you would like to join.
  - membership_id (integer()): Membership id of the account being invited.
  - membership_type (integer()): MembershipType of the account being invited.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20024{}} on success
  {:error, info} on failure
  """
  @spec group_v2_individual_group_invite(Tesla.Env.client, integer(), integer(), integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20024.t} | {:error, Tesla.Env.t}
  def group_v2_individual_group_invite(connection, group_id, membership_id, membership_type, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/GroupV2/#{group_id}/Members/IndividualInvite/#{membership_type}/#{membership_id}/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20024{})
  end

  @doc """
  Cancels a pending invitation to join a group.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - group_id (integer()): ID of the group you would like to join.
  - membership_id (integer()): Membership id of the account being cancelled.
  - membership_type (integer()): MembershipType of the account being cancelled.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20024{}} on success
  {:error, info} on failure
  """
  @spec group_v2_individual_group_invite_cancel(Tesla.Env.client, integer(), integer(), integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20024.t} | {:error, Tesla.Env.t}
  def group_v2_individual_group_invite_cancel(connection, group_id, membership_id, membership_type, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/GroupV2/#{group_id}/Members/IndividualInviteCancel/#{membership_type}/#{membership_id}/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20024{})
  end

  @doc """
  Kick a member from the given group, forcing them to reapply if they wish to re-join the group. You must have suitable permissions in the group to perform this operation.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - group_id (integer()): Group ID to kick the user from.
  - membership_id (integer()): Membership ID to kick.
  - membership_type (integer()): Membership type of the provided membership ID.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20022{}} on success
  {:error, info} on failure
  """
  @spec group_v2_kick_member(Tesla.Env.client, integer(), integer(), integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20022.t} | {:error, Tesla.Env.t}
  def group_v2_kick_member(connection, group_id, membership_id, membership_type, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/GroupV2/#{group_id}/Members/#{membership_type}/#{membership_id}/Kick/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20022{})
  end

  @doc """
  Request permission to join the given group.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - group_id (integer()): ID of the group you would like to join.
  - membership_type (integer()): MembershipType of the account to use when joining.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20024{}} on success
  {:error, info} on failure
  """
  @spec group_v2_request_group_membership(Tesla.Env.client, integer(), integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20024.t} | {:error, Tesla.Env.t}
  def group_v2_request_group_membership(connection, group_id, membership_type, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/GroupV2/#{group_id}/Members/Apply/#{membership_type}/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20024{})
  end

  @doc """
  Rescind your application to join the given group or leave the group if you are already a member..

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - group_id (integer()): ID of the group.
  - membership_type (integer()): MembershipType of the account to leave.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20022{}} on success
  {:error, info} on failure
  """
  @spec group_v2_rescind_group_membership(Tesla.Env.client, integer(), integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20022.t} | {:error, Tesla.Env.t}
  def group_v2_rescind_group_membership(connection, group_id, membership_type, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/GroupV2/#{group_id}/Members/Rescind/#{membership_type}/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20022{})
  end

  @doc """
  Sets the state of the user&#39;s clan invite preferences - true if they wish to be invited to clans, false otherwise.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - allow_invites (boolean()): True to allow invites of this user to clans, false otherwise.
  - m_type (integer()): The Destiny membership type of linked account we are manipulating.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20015{}} on success
  {:error, info} on failure
  """
  @spec group_v2_set_user_clan_invite_setting(Tesla.Env.client, boolean(), integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20015.t} | {:error, Tesla.Env.t}
  def group_v2_set_user_clan_invite_setting(connection, allow_invites, m_type, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/GroupV2/SetUserClanInviteSetting/#{m_type}/#{allow_invites}/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20015{})
  end

  @doc """
  Unbans the requested member, allowing them to re-apply for membership.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - group_id (integer()): 
  - membership_id (integer()): Membership ID of the member to unban from the group
  - membership_type (integer()): Membership type of the provided membership ID.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20015{}} on success
  {:error, info} on failure
  """
  @spec group_v2_unban_member(Tesla.Env.client, integer(), integer(), integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20015.t} | {:error, Tesla.Env.t}
  def group_v2_unban_member(connection, group_id, membership_id, membership_type, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/GroupV2/#{group_id}/Members/#{membership_type}/#{membership_id}/Unban/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20015{})
  end
end
