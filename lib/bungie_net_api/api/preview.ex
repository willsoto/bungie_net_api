# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule BungieNetAPI.Api.Preview do
  @moduledoc """
  API calls for all endpoints tagged `Preview`.
  """

  alias BungieNetAPI.Connection
  import BungieNetAPI.RequestBuilder


  @doc """
  Activate a Talent Node. Chill out, everyone: we haven&#39;t decided yet whether this will be able to activate nodes with costs, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. PREVIEW: This service is not actually implemented yet, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20015{}} on success
  {:error, info} on failure
  """
  @spec destiny2_activate_talent_node(Tesla.Env.client, keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20015.t} | {:error, Tesla.Env.t}
  def destiny2_activate_talent_node(connection, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/Destiny2/Actions/Items/ActivateTalentNode/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20015{})
  end

  @doc """
  Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - group_id (integer()): Group ID of the clan whose leaderboards you wish to fetch.
  - opts (KeywordList): [optional] Optional parameters
    - :modes (String.t): List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20042{}} on success
  {:error, info} on failure
  """
  @spec destiny2_get_clan_aggregate_stats(Tesla.Env.client, integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20042.t} | {:error, Tesla.Env.t}
  def destiny2_get_clan_aggregate_stats(connection, group_id, opts \\ []) do
    optional_params = %{
      :"modes" => :query
    }
    %{}
    |> method(:get)
    |> url("/Destiny2/Stats/AggregateClanStats/#{group_id}/")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20042{})
  end

  @doc """
  Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - group_id (integer()): Group ID of the clan whose leaderboards you wish to fetch.
  - opts (KeywordList): [optional] Optional parameters
    - :maxtop (integer()): Maximum number of top players to return. Use a large number to get entire leaderboard.
    - :modes (String.t): List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
    - :statid (String.t): ID of stat to return rather than returning all Leaderboard stats.

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20041{}} on success
  {:error, info} on failure
  """
  @spec destiny2_get_clan_leaderboards(Tesla.Env.client, integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20041.t} | {:error, Tesla.Env.t}
  def destiny2_get_clan_leaderboards(connection, group_id, opts \\ []) do
    optional_params = %{
      :"maxtop" => :query,
      :"modes" => :query,
      :"statid" => :query
    }
    %{}
    |> method(:get)
    |> url("/Destiny2/Stats/Leaderboards/Clans/#{group_id}/")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20041{})
  end

  @doc """
  Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - destiny_membership_id (integer()): The Destiny membershipId of the user to retrieve.
  - membership_type (integer()): A valid non-BungieNet membership type.
  - opts (KeywordList): [optional] Optional parameters
    - :maxtop (integer()): Maximum number of top players to return. Use a large number to get entire leaderboard.
    - :modes (String.t): List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
    - :statid (String.t): ID of stat to return rather than returning all Leaderboard stats.

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20041{}} on success
  {:error, info} on failure
  """
  @spec destiny2_get_leaderboards(Tesla.Env.client, integer(), integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20041.t} | {:error, Tesla.Env.t}
  def destiny2_get_leaderboards(connection, destiny_membership_id, membership_type, opts \\ []) do
    optional_params = %{
      :"maxtop" => :query,
      :"modes" => :query,
      :"statid" => :query
    }
    %{}
    |> method(:get)
    |> url("/Destiny2/#{membership_type}/Account/#{destiny_membership_id}/Stats/Leaderboards/")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20041{})
  end

  @doc """
  Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - character_id (integer()): The specific character to build the leaderboard around for the provided Destiny Membership.
  - destiny_membership_id (integer()): The Destiny membershipId of the user to retrieve.
  - membership_type (integer()): A valid non-BungieNet membership type.
  - opts (KeywordList): [optional] Optional parameters
    - :maxtop (integer()): Maximum number of top players to return. Use a large number to get entire leaderboard.
    - :modes (String.t): List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
    - :statid (String.t): ID of stat to return rather than returning all Leaderboard stats.

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20041{}} on success
  {:error, info} on failure
  """
  @spec destiny2_get_leaderboards_for_character(Tesla.Env.client, integer(), integer(), integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20041.t} | {:error, Tesla.Env.t}
  def destiny2_get_leaderboards_for_character(connection, character_id, destiny_membership_id, membership_type, opts \\ []) do
    optional_params = %{
      :"maxtop" => :query,
      :"modes" => :query,
      :"statid" => :query
    }
    %{}
    |> method(:get)
    |> url("/Destiny2/Stats/Leaderboards/#{membership_type}/#{destiny_membership_id}/#{character_id}/")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20041{})
  end

  @doc """
  Get the details of a specific Vendor. PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - character_id (integer()): The Destiny Character ID of the character for whom we&#39;re getting vendor info.
  - destiny_membership_id (integer()): Destiny membership ID of another user. You may be denied.
  - membership_type (integer()): A valid non-BungieNet membership type.
  - vendor_hash (integer()): The Hash identifier of the Vendor to be returned.
  - opts (KeywordList): [optional] Optional parameters
    - :components ([DestinyDestinyComponentType]): A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20037{}} on success
  {:error, info} on failure
  """
  @spec destiny2_get_vendor(Tesla.Env.client, integer(), integer(), integer(), integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20037.t} | {:error, Tesla.Env.t}
  def destiny2_get_vendor(connection, character_id, destiny_membership_id, membership_type, vendor_hash, opts \\ []) do
    optional_params = %{
      :"components" => :query
    }
    %{}
    |> method(:get)
    |> url("/Destiny2/#{membership_type}/Profile/#{destiny_membership_id}/Character/#{character_id}/Vendors/#{vendor_hash}/")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20037{})
  end

  @doc """
  Get currently available vendors from the list of vendors that can possibly have rotating inventory. Note that this does not include things like preview vendors and vendors-as-kiosks, neither of whom have rotating/dynamic inventories. Use their definitions as-is for those. PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - character_id (integer()): The Destiny Character ID of the character for whom we&#39;re getting vendor info.
  - destiny_membership_id (integer()): Destiny membership ID of another user. You may be denied.
  - membership_type (integer()): A valid non-BungieNet membership type.
  - opts (KeywordList): [optional] Optional parameters
    - :components ([DestinyDestinyComponentType]): A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20036{}} on success
  {:error, info} on failure
  """
  @spec destiny2_get_vendors(Tesla.Env.client, integer(), integer(), integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20036.t} | {:error, Tesla.Env.t}
  def destiny2_get_vendors(connection, character_id, destiny_membership_id, membership_type, opts \\ []) do
    optional_params = %{
      :"components" => :query
    }
    %{}
    |> method(:get)
    |> url("/Destiny2/#{membership_type}/Profile/#{destiny_membership_id}/Character/#{character_id}/Vendors/")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20036{})
  end

  @doc """
  Insert a plug into a socketed item. I know how it sounds, but I assure you it&#39;s much more G-rated than you might be guessing. We haven&#39;t decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20015{}} on success
  {:error, info} on failure
  """
  @spec destiny2_insert_socket_plug(Tesla.Env.client, keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20015.t} | {:error, Tesla.Env.t}
  def destiny2_insert_socket_plug(connection, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/Destiny2/Actions/Items/InsertSocketPlug/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20015{})
  end
end
