# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule BungieNetAPI.Api.User do
  @moduledoc """
  API calls for all endpoints tagged `User`.
  """

  alias BungieNetAPI.Connection
  import BungieNetAPI.RequestBuilder


  @doc """
  Returns a list of all available user themes.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse2003{}} on success
  {:error, info} on failure
  """
  @spec user_get_available_themes(Tesla.Env.client, keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse2003.t} | {:error, Tesla.Env.t}
  def user_get_available_themes(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/User/GetAvailableThemes/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse2003{})
  end

  @doc """
  Loads a bungienet user by membership id.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - id (integer()): The requested Bungie.net membership id.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse200{}} on success
  {:error, info} on failure
  """
  @spec user_get_bungie_net_user_by_id(Tesla.Env.client, integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse200.t} | {:error, Tesla.Env.t}
  def user_get_bungie_net_user_by_id(connection, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/User/GetBungieNetUserById/#{id}/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse200{})
  end

  @doc """
  Returns a list of accounts associated with the supplied membership ID and membership type. This will include all linked accounts (even when hidden) if supplied credentials permit it.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - membership_id (integer()): The membership ID of the target user.
  - membership_type (integer()): Type of the supplied membership ID.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse2004{}} on success
  {:error, info} on failure
  """
  @spec user_get_membership_data_by_id(Tesla.Env.client, integer(), integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse2004.t} | {:error, Tesla.Env.t}
  def user_get_membership_data_by_id(connection, membership_id, membership_type, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/User/GetMembershipsById/#{membership_id}/#{membership_type}/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse2004{})
  end

  @doc """
  Returns a list of accounts associated with signed in user. This is useful for OAuth implementations that do not give you access to the token response.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse2004{}} on success
  {:error, info} on failure
  """
  @spec user_get_membership_data_for_current_user(Tesla.Env.client, keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse2004.t} | {:error, Tesla.Env.t}
  def user_get_membership_data_for_current_user(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/User/GetMembershipsForCurrentUser/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse2004{})
  end

  @doc """
  Returns a user&#39;s linked Partnerships.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - membership_id (integer()): The ID of the member for whom partnerships should be returned.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse2005{}} on success
  {:error, info} on failure
  """
  @spec user_get_partnerships(Tesla.Env.client, integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse2005.t} | {:error, Tesla.Env.t}
  def user_get_partnerships(connection, membership_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/User/#{membership_id}/Partnerships/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse2005{})
  end

  @doc """
  Loads aliases of a bungienet membership id.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - id (integer()): The requested Bungie.net membership id.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse2001{}} on success
  {:error, info} on failure
  """
  @spec user_get_user_aliases(Tesla.Env.client, integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse2001.t} | {:error, Tesla.Env.t}
  def user_get_user_aliases(connection, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/User/GetUserAliases/#{id}/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse2001{})
  end

  @doc """
  Returns a list of possible users based on the search string

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :q (String.t): The search string.

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse2002{}} on success
  {:error, info} on failure
  """
  @spec user_search_users(Tesla.Env.client, keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse2002.t} | {:error, Tesla.Env.t}
  def user_search_users(connection, opts \\ []) do
    optional_params = %{
      :"q" => :query
    }
    %{}
    |> method(:get)
    |> url("/User/SearchUsers/")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse2002{})
  end
end
