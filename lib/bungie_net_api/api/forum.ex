# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule BungieNetAPI.Api.Forum do
  @moduledoc """
  API calls for all endpoints tagged `Forum`.
  """

  alias BungieNetAPI.Connection
  import BungieNetAPI.RequestBuilder


  @doc """
  Allows the owner of a fireteam thread to approve all joined members and start a private message conversation with them.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - topic_id (integer()): The post id of the recruitment topic to approve.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20010{}} on success
  {:error, info} on failure
  """
  @spec forum_approve_fireteam_thread(Tesla.Env.client, integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20010.t} | {:error, Tesla.Env.t}
  def forum_approve_fireteam_thread(connection, topic_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/Forum/Recruit/Approve/#{topic_id}/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20010{})
  end

  @doc """
  Gets a listing of all topics marked as part of the core group.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - category_filter (integer()): The category filter.
  - page (integer()): Zero base page
  - quick_date (integer()): The date filter.
  - sort (integer()): The sort mode.
  - opts (KeywordList): [optional] Optional parameters
    - :locales (String.t): Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39;

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse2006{}} on success
  {:error, info} on failure
  """
  @spec forum_get_core_topics_paged(Tesla.Env.client, integer(), integer(), integer(), integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse2006.t} | {:error, Tesla.Env.t}
  def forum_get_core_topics_paged(connection, category_filter, page, quick_date, sort, opts \\ []) do
    optional_params = %{
      :"locales" => :query
    }
    %{}
    |> method(:get)
    |> url("/Forum/GetCoreTopicsPaged/#{page}/#{sort}/#{quick_date}/#{category_filter}/")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse2006{})
  end

  @doc """
  Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :partialtag (String.t): The partial tag input to generate suggestions from.

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse2008{}} on success
  {:error, info} on failure
  """
  @spec forum_get_forum_tag_suggestions(Tesla.Env.client, keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse2008.t} | {:error, Tesla.Env.t}
  def forum_get_forum_tag_suggestions(connection, opts \\ []) do
    optional_params = %{
      :"partialtag" => :query
    }
    %{}
    |> method(:get)
    |> url("/Forum/GetForumTagSuggestions/")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse2008{})
  end

  @doc """
  Gets the specified forum poll.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - topic_id (integer()): The post id of the topic that has the poll.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse2006{}} on success
  {:error, info} on failure
  """
  @spec forum_get_poll(Tesla.Env.client, integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse2006.t} | {:error, Tesla.Env.t}
  def forum_get_poll(connection, topic_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/Forum/Poll/#{topic_id}/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse2006{})
  end

  @doc """
  Returns the post specified and its immediate parent.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - child_post_id (integer()): 
  - opts (KeywordList): [optional] Optional parameters
    - :showbanned (String.t): If this value is not null or empty, banned posts are requested to be returned

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse2006{}} on success
  {:error, info} on failure
  """
  @spec forum_get_post_and_parent(Tesla.Env.client, integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse2006.t} | {:error, Tesla.Env.t}
  def forum_get_post_and_parent(connection, child_post_id, opts \\ []) do
    optional_params = %{
      :"showbanned" => :query
    }
    %{}
    |> method(:get)
    |> url("/Forum/GetPostAndParent/#{child_post_id}/")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse2006{})
  end

  @doc """
  Returns the post specified and its immediate parent of posts that are awaiting approval.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - child_post_id (integer()): 
  - opts (KeywordList): [optional] Optional parameters
    - :showbanned (String.t): If this value is not null or empty, banned posts are requested to be returned

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse2006{}} on success
  {:error, info} on failure
  """
  @spec forum_get_post_and_parent_awaiting_approval(Tesla.Env.client, integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse2006.t} | {:error, Tesla.Env.t}
  def forum_get_post_and_parent_awaiting_approval(connection, child_post_id, opts \\ []) do
    optional_params = %{
      :"showbanned" => :query
    }
    %{}
    |> method(:get)
    |> url("/Forum/GetPostAndParentAwaitingApproval/#{child_post_id}/")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse2006{})
  end

  @doc """
  Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - get_parent_post (boolean()): 
  - page (integer()): 
  - page_size (integer()): 
  - parent_post_id (integer()): 
  - reply_size (integer()): 
  - root_thread_mode (boolean()): 
  - sort_mode (integer()): 
  - opts (KeywordList): [optional] Optional parameters
    - :showbanned (String.t): If this value is not null or empty, banned posts are requested to be returned

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse2006{}} on success
  {:error, info} on failure
  """
  @spec forum_get_posts_threaded_paged(Tesla.Env.client, boolean(), integer(), integer(), integer(), integer(), boolean(), integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse2006.t} | {:error, Tesla.Env.t}
  def forum_get_posts_threaded_paged(connection, get_parent_post, page, page_size, parent_post_id, reply_size, root_thread_mode, sort_mode, opts \\ []) do
    optional_params = %{
      :"showbanned" => :query
    }
    %{}
    |> method(:get)
    |> url("/Forum/GetPostsThreadedPaged/#{parent_post_id}/#{page}/#{page_size}/#{reply_size}/#{get_parent_post}/#{root_thread_mode}/#{sort_mode}/")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse2006{})
  end

  @doc """
  Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - child_post_id (integer()): 
  - page (integer()): 
  - page_size (integer()): 
  - reply_size (integer()): 
  - root_thread_mode (boolean()): 
  - sort_mode (integer()): 
  - opts (KeywordList): [optional] Optional parameters
    - :showbanned (String.t): If this value is not null or empty, banned posts are requested to be returned

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse2006{}} on success
  {:error, info} on failure
  """
  @spec forum_get_posts_threaded_paged_from_child(Tesla.Env.client, integer(), integer(), integer(), integer(), boolean(), integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse2006.t} | {:error, Tesla.Env.t}
  def forum_get_posts_threaded_paged_from_child(connection, child_post_id, page, page_size, reply_size, root_thread_mode, sort_mode, opts \\ []) do
    optional_params = %{
      :"showbanned" => :query
    }
    %{}
    |> method(:get)
    |> url("/Forum/GetPostsThreadedPagedFromChild/#{child_post_id}/#{page}/#{page_size}/#{reply_size}/#{root_thread_mode}/#{sort_mode}/")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse2006{})
  end

  @doc """
  Allows the caller to get a list of to 25 recruitment thread summary information objects.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20011{}} on success
  {:error, info} on failure
  """
  @spec forum_get_recruitment_thread_summaries(Tesla.Env.client, keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20011.t} | {:error, Tesla.Env.t}
  def forum_get_recruitment_thread_summaries(connection, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/Forum/Recruit/Summaries/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20011{})
  end

  @doc """
  Gets the post Id for the given content item&#39;s comments, if it exists.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - content_id (integer()): 
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse2007{}} on success
  {:error, info} on failure
  """
  @spec forum_get_topic_for_content(Tesla.Env.client, integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse2007.t} | {:error, Tesla.Env.t}
  def forum_get_topic_for_content(connection, content_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/Forum/GetTopicForContent/#{content_id}/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse2007{})
  end

  @doc """
  Get topics from any forum.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - category_filter (integer()): A category filter
  - group (integer()): The group, if any.
  - page (integer()): Zero paged page number
  - page_size (integer()): Unused
  - quick_date (integer()): A date filter.
  - sort (integer()): The sort mode.
  - opts (KeywordList): [optional] Optional parameters
    - :locales (String.t): Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39;
    - :tagstring (String.t): The tags to search, if any.

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse2006{}} on success
  {:error, info} on failure
  """
  @spec forum_get_topics_paged(Tesla.Env.client, integer(), integer(), integer(), integer(), integer(), integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse2006.t} | {:error, Tesla.Env.t}
  def forum_get_topics_paged(connection, category_filter, group, page, page_size, quick_date, sort, opts \\ []) do
    optional_params = %{
      :"locales" => :query,
      :"tagstring" => :query
    }
    %{}
    |> method(:get)
    |> url("/Forum/GetTopicsPaged/#{page}/#{page_size}/#{group}/#{sort}/#{quick_date}/#{category_filter}/")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse2006{})
  end

  @doc """
  Allows a user to slot themselves into a recruitment thread fireteam slot. Returns the new state of the fireteam.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - topic_id (integer()): The post id of the recruitment topic you wish to join.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse2009{}} on success
  {:error, info} on failure
  """
  @spec forum_join_fireteam_thread(Tesla.Env.client, integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse2009.t} | {:error, Tesla.Env.t}
  def forum_join_fireteam_thread(connection, topic_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/Forum/Recruit/Join/#{topic_id}/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse2009{})
  end

  @doc """
  Allows a recruitment thread owner to kick a join user from the fireteam. Returns the new state of the fireteam.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - target_membership_id (integer()): The id of the user you wish to kick.
  - topic_id (integer()): The post id of the recruitment topic you wish to join.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse2009{}} on success
  {:error, info} on failure
  """
  @spec forum_kick_ban_fireteam_applicant(Tesla.Env.client, integer(), integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse2009.t} | {:error, Tesla.Env.t}
  def forum_kick_ban_fireteam_applicant(connection, target_membership_id, topic_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/Forum/Recruit/KickBan/#{topic_id}/#{target_membership_id}/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse2009{})
  end

  @doc """
  Allows a user to remove themselves from a recruitment thread fireteam slot. Returns the new state of the fireteam.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - topic_id (integer()): The post id of the recruitment topic you wish to leave.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse2009{}} on success
  {:error, info} on failure
  """
  @spec forum_leave_fireteam_thread(Tesla.Env.client, integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse2009.t} | {:error, Tesla.Env.t}
  def forum_leave_fireteam_thread(connection, topic_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/Forum/Recruit/Leave/#{topic_id}/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse2009{})
  end
end
