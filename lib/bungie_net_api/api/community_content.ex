# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule BungieNetAPI.Api.CommunityContent do
  @moduledoc """
  API calls for all endpoints tagged `CommunityContent`.
  """

  alias BungieNetAPI.Connection
  import BungieNetAPI.RequestBuilder


  @doc """
  Returns community content.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - media_filter (integer()): The type of media to get
  - page (integer()): Zero based page
  - sort (integer()): The sort mode.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse2006{}} on success
  {:error, info} on failure
  """
  @spec community_content_get_community_content(Tesla.Env.client, integer(), integer(), integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse2006.t} | {:error, Tesla.Env.t}
  def community_content_get_community_content(connection, media_filter, page, sort, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/CommunityContent/Get/#{sort}/#{media_filter}/#{page}/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse2006{})
  end

  @doc """
  Returns info about community members who are live streaming.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - page (integer()): Zero based page.
  - partnership_type (integer()): The type of partnership for which the status should be returned.
  - sort (integer()): The sort mode.
  - opts (KeywordList): [optional] Optional parameters
    - :mode_hash (integer()): The hash of the Activity Mode for which streams should be retrieved. Don&#39;t pass it in or pass 0 to not filter by mode.
    - :stream_locale (String.t): The locale for streams you&#39;d like to see. Don&#39;t pass this to fall back on your BNet locale. Pass &#39;ALL&#39; to not filter by locale.

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20051{}} on success
  {:error, info} on failure
  """
  @spec community_content_get_community_live_statuses(Tesla.Env.client, integer(), integer(), integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20051.t} | {:error, Tesla.Env.t}
  def community_content_get_community_live_statuses(connection, page, partnership_type, sort, opts \\ []) do
    optional_params = %{
      :"modeHash" => :query,
      :"streamLocale" => :query
    }
    %{}
    |> method(:get)
    |> url("/CommunityContent/Live/All/#{partnership_type}/#{sort}/#{page}/")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20051{})
  end

  @doc """
  Returns info about community members who are live streaming in your clans.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - page (integer()): Zero based page.
  - partnership_type (integer()): The type of partnership for which the status should be returned.
  - sort (integer()): The sort mode.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20051{}} on success
  {:error, info} on failure
  """
  @spec community_content_get_community_live_statuses_for_clanmates(Tesla.Env.client, integer(), integer(), integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20051.t} | {:error, Tesla.Env.t}
  def community_content_get_community_live_statuses_for_clanmates(connection, page, partnership_type, sort, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/CommunityContent/Live/Clan/#{partnership_type}/#{sort}/#{page}/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20051{})
  end

  @doc """
  Returns info about community members who are live streaming among your friends.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - page (integer()): Zero based page.
  - partnership_type (integer()): The type of partnership for which the status should be returned.
  - sort (integer()): The sort mode.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20051{}} on success
  {:error, info} on failure
  """
  @spec community_content_get_community_live_statuses_for_friends(Tesla.Env.client, integer(), integer(), integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20051.t} | {:error, Tesla.Env.t}
  def community_content_get_community_live_statuses_for_friends(connection, page, partnership_type, sort, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/CommunityContent/Live/Friends/#{partnership_type}/#{sort}/#{page}/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20051{})
  end

  @doc """
  Returns info about Featured live streams.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - page (integer()): Zero based page.
  - partnership_type (integer()): The type of partnership for which the status should be returned.
  - sort (integer()): The sort mode.
  - opts (KeywordList): [optional] Optional parameters
    - :stream_locale (String.t): The locale for streams you&#39;d like to see. Don&#39;t pass this to fall back on your BNet locale. Pass &#39;ALL&#39; to not filter by locale.

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20051{}} on success
  {:error, info} on failure
  """
  @spec community_content_get_featured_community_live_statuses(Tesla.Env.client, integer(), integer(), integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20051.t} | {:error, Tesla.Env.t}
  def community_content_get_featured_community_live_statuses(connection, page, partnership_type, sort, opts \\ []) do
    optional_params = %{
      :"streamLocale" => :query
    }
    %{}
    |> method(:get)
    |> url("/CommunityContent/Live/Featured/#{partnership_type}/#{sort}/#{page}/")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20051{})
  end

  @doc """
  Gets the Live Streaming status of a particular Account and Membership Type.

  ## Parameters

  - connection (BungieNetAPI.Connection): Connection to server
  - membership_id (integer()): The membershipId related to that type.
  - membership_type (integer()): The type of account for which info will be extracted.
  - partnership_type (integer()): The type of partnership for which info will be extracted.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %BungieNetAPI.Model.InlineResponse20052{}} on success
  {:error, info} on failure
  """
  @spec community_content_get_streaming_status_for_member(Tesla.Env.client, integer(), integer(), integer(), keyword()) :: {:ok, BungieNetAPI.Model.InlineResponse20052.t} | {:error, Tesla.Env.t}
  def community_content_get_streaming_status_for_member(connection, membership_id, membership_type, partnership_type, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/CommunityContent/Live/Users/#{partnership_type}/#{membership_type}/#{membership_id}/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%BungieNetAPI.Model.InlineResponse20052{})
  end
end
